{"version":3,"sources":["components/LoginForm/LoginForm.module.css","components/SignupForm/SignupForm.module.css","components/Navbar/Navbar.module.css","components/Footer/Footer.module.css","components/Navbar/Navbar.jsx","components/Footer/Footer.jsx","pages/Home/Home.jsx","pages/Restaurants/Restaurants.jsx","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","components/SignupForm/SignupForm.jsx","pages/Signup/Signup.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","styles","navbar","to","Footer","footer","Date","getFullYear","Home","Restaurants","LoginForm","state","getInitialState","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","email","password","onSubmit","this","form","fieldset","htmlFor","id","type","onChange","Component","Login","SignupForm","passwordConf","Signup","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b94d0271.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginForm_form__1tF8D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SignupForm_form__1Dn5C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__CLYHD\",\"navbarul\":\"Navbar_navbarul__34Umi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1w0lV\"};","import React from \"react\";\nimport styles from \"./Navbar.module.css\";\n\nimport { Link } from 'react-router-dom';\n\nconst Navbar = props => {\n  return (\n    <nav className={styles.navbar}>\n      <h1>\n        <Link to=\"/\">Foodify</Link>\n      </h1>\n      <ul>\n        <li>\n          <Link to=\"/restaurants\">Restaurants</Link>\n        </li>\n        <li>\n          <Link to=\"/login\">Login</Link>\n        </li>\n        <li>\n          <Link to=\"/signup\">Signup</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\nexport default Navbar;\n\n","import React from 'react';\nimport styles from './Footer.module.css';\n\nconst Footer = (props) => {\n    return (\n        <footer className={styles.footer}>\n            <p>Copyright &copy; Foodify {new Date().getFullYear()}</p>\n\n        </footer>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport styles from './Home.module.css';\n\nconst Home = (props) => {\n    return (\n        <main>\n            <h1>Home</h1>\n        </main>\n    );\n};\n\nexport default Home;","import React from 'react';\nimport styles from './Restaurants.module.css';\n\nconst Restaurants = (props) => {\n    return (\n        <main>\n            <h1>Restaurants</h1>\n        </main>\n    );\n};\n\nexport default Restaurants;","import React, { Component } from 'react';\n\nimport styles from './LoginForm.module.css';\n\nclass LoginForm extends Component {\n    state = this.getInitialState();\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    handleSubmit = e => {\n        e.preventDefault();\n        //we pass the data from state to a service module\n        //the service module would make an AJAX call to \n        //our server and create a new record in the database\n        //now we clear our form\n        this.setState(this.getInitialState());\n    }\n\n    getInitialState() {\n        return {\n            email: '',\n            password: '',\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className={styles.form}>\n                <fieldset className={styles.fieldset}>\n                    <legend>Login</legend>\n                    <label htmlFor=\"email\">Email Address</label>\n                    <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        onChange={this.handleChange}\n                    />\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleChange}\n                    />\n\n                    <button type=\"submit\">Submit</button>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default LoginForm;","import React from 'react';\nimport LoginForm from '../../components/LoginForm/LoginForm'\n\nconst Login = (props) => {\n    return (\n        <main>\n            <h1>Login</h1>\n            <LoginForm />\n        </main>\n    );\n}\n\nexport default Login;","import React, { Component } from 'react';\n\nimport styles from './SignupForm.module.css';\n\nclass SignupForm extends Component {\n    state = this.getInitialState();\n\n    handleChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n    handleSubmit = e => {\n        e.preventDefault();\n        //we pass the data from state to a service module\n        //the service module would make an AJAX call to \n        //our server and create a new record in the database\n        //now we clear our form\n        this.setState(this.getInitialState());\n    }\n\n    getInitialState() {\n        return {\n            name: '',\n            email: '',\n            password: '',\n            passwordConf: ''\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className={styles.form}>\n                <fieldset className={styles.fieldset}>\n                    <legend>Signup Form</legend>\n                    <label htmlFor=\"name\">Full Name</label>\n                    <input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                    />\n\n                    <label htmlFor=\"email\">Email Address</label>\n                    <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        onChange={this.handleChange}\n                    />\n\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        value={this.state.password}\n                        onChange={this.handleChange}\n                    />\n\n                    <label htmlFor=\"passwordConfirmation\">Password Confirmation</label>\n                    <input\n                        id=\"passwordConf\"\n                        name=\"passwordConf\"\n                        type=\"password\"\n                        value={this.state.passwordConf}\n                        onChange={this.handleChange}\n                    />\n\n                    <button type=\"submit\">Submit</button>\n                </fieldset>\n            </form>\n        );\n    }\n}\n\nexport default SignupForm;","import React from \"react\";\nimport style from \"./Signup.module.css\";\n\nimport SignupForm from '../../components/SignupForm/SignupForm';\nconst Signup = () => {\n    return (\n        <main>\n            <h1>Signup</h1>\n            <SignupForm />\n        </main>\n    );\n};\nexport default Signup;","import React from \"react\";\nimport { Switch, Route } from 'react-router-dom';\n\n//Reusable Components\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\n\n//Page Components\nimport Home from './pages/Home/Home';\nimport Restaurants from './pages/Restaurants/Restaurants';\nimport Login from './pages/Login/Login';\nimport Signup from './pages/Signup/Signup';\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App-outer-container\">\n      <Navbar />\n      <div className=\"App-inner-container\">\n        <Switch>\n          <Route exact path=\"/\" render={props =>\n            <Home />\n          } />\n          <Route exact path=\"/restaurants\" render={props =>\n            <Restaurants />\n          } />\n          <Route exact path=\"/login\" render={props =>\n            <Login />\n          } />\n          <Route exact path=\"/signup\" render={props =>\n            <Signup />\n          } />\n        </Switch>\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}